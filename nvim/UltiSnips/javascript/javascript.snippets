# const / let
snippet const
const ${1} = ${0};
endsnippet
snippet let
let ${1} = ${0};
endsnippet

# Imports
snippet im "import xyz from 'xyz'"
import ${1} from '${2:$1}';
endsnippet
snippet imas "import * as xyz from 'xyz'"
import * as ${1} from '${2:$1}';
endsnippet
snippet imm "import { member } from 'xyz'"
import { ${1} } from '${2}';
endsnippet
snippet ed "export default"
export default ${0}
endsnippet

# Classe
snippet cla "class x {}"
class ${1} {
	${0:${VISUAL}}
}
endsnippet
snippet classex "class x extends y {}"
class ${1} extends ${2} {
	${0:${VISUAL}}
}
endsnippet
snippet classcon "class (with constructor)"
class ${1} {
	constructor(${2}) {
		${0:${VISUAL}}
	}
}
endsnippet

# Loops
snippet foro "for (const prop of object}) { ... }"
for (const ${1:prop} of ${2:object}) {
	${0:$1}
}
endsnippet

# Functions
snippet fun* "Generator function"
function* ${1:function_name}(${2}) {
	${0:${VISUAL}}
}
endsnippet
snippet fu "const x = () => {}"
const ${1} = (${2}) => {${0:${VISUAL}}}
endsnippet
snippet => "() => {}"
(${1}) => {${0:${VISUAL}}}
endsnippet
snippet af "() => {}"
(${1}) => {${0:${VISUAL}}}
endsnippet

# String Interpolation
snippet ${
${${1}}${0}
endsnippet

# Flow control
# if
snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet
# if ... else
snippet ifelse "if (condition) { ... } else { ... }"
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet
# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet
# switch
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet
snippet case "case 'xyz': ... break"
case '${1:case}':
	${0:${VISUAL}}
	break;
endsnippet
snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet
snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet
# throw Error
snippet err
throw new Error('${1:error message}')
endsnippet
snippet for "for (...) {...}"
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${0:${VISUAL}}
}
endsnippet
snippet forr "reversed for (...) {...}"
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${0:${VISUAL}}
}
endsnippet
snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet
snippet do "do { ... } while (condition)"
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet
# For in loop
snippet fori
for (var ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet


# Documentation
# docstring
snippet /**
/**
 * ${0:description}
 *
 */
endsnippet
snippet @par
@param {${1:type}} ${2:name} ${0:description}
endsnippet
snippet @ret
@return {${1:type}} ${0:description}
endsnippet

# JSON
# JSON.parse
snippet jsonp
JSON.parse(${0:jstr});
endsnippet
# JSON.stringify
snippet jsons
JSON.stringify(${0:object});
endsnippet

# DOM selectors
# Get elements
snippet get
getElementsBy${1:TagName}('${0}')
endsnippet
# Get element
snippet gett
getElementBy${1:Id}('${0}')
endsnippet
# Elements by class
snippet by.
${1:document}.getElementsByClassName('${0:class}')
endsnippet
# Element by ID
snippet by#
${1:document}.getElementById('${0:element ID}')
endsnippet
# Query selector
snippet qs
${1:document}.querySelector('${0:CSS selector}')
endsnippet
# Query selector all
snippet qsa
${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet

# Debugging
snippet de
debugger;
endsnippet
snippet cl "console.log"
console.log(${0});
endsnippet
snippet cd "console.debug"
console.debug(${0});
endsnippet
snippet ce "console.error"
console.error(${0});
endsnippet
snippet cw "console.warn"
console.warn(${0});
endsnippet
snippet ci "console.info"
console.info(${0});
endsnippet
snippet ct "console.trace"
console.trace(${0:label});
endsnippet
snippet ctime "console.time ... console.timeEnd"
console.time("${1:label}");
${0:${VISUAL}}
console.timeEnd("$1");
endsnippet
snippet ctimestamp "console.timeStamp"
console.timeStamp("${1:label}");
endsnippet
snippet ca "console.assert"
console.assert(${1:expression}, ${0:obj});
endsnippet
snippet cclear "console.clear"
console.clear();
endsnippet
snippet cdir "console.dir"
console.dir(${0:obj});
endsnippet
snippet cdirx "console.dirxml"
console.dirxml(${1:object});
endsnippet
snippet cgroup "console.group"
console.group("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet
snippet cgroupc "console.groupCollapsed"
console.groupCollapsed("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet
snippet cprof "console.profile"
console.profile("${1:label}");
${0:${VISUAL}}
console.profileEnd();
endsnippet
snippet ctable "console.table"
console.table(${1:"${2:value}"});
endsnippet

# Misc
# 'use strict';
snippet us
'use strict';
endsnippet
# setTimeout function
snippet setTime
setTimeout(() => {${0}}${2}, ${1:10});
endsnippet
