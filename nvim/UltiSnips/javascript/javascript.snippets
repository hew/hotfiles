#
# const & let
#
snippet const "const x = b;"
const ${1} = ${0};
endsnippet

snippet let "let a = b;"
let ${1} = ${0};
endsnippet

#
# Functions
#
snippet fun "const a = () => {};"
const ${1} = (${2}) => {${0:${VISUAL}}}
endsnippet

snippet => "() => {}"
(${1}) => {${0:${VISUAL}}}
endsnippet

snippet fun* "Generator function"
function* ${1:function_name}(${2}) {
  ${0:${VISUAL}}
}
endsnippet



#
# Imports
#
snippet imp "import xyz from 'xyz'"
import ${1} from '${2:$1}';
endsnippet



#
# Classes
#
snippet class "class x {}"
class ${1} {
  ${0:${VISUAL}}
}
endsnippet



#
# Loops
#
snippet for "for (const prop of object}) { ... }"
for (const ${1:prop} of ${2:object}) {
  ${0:$1}
}
endsnippet


#
# String Interpolation
#
snippet ${
${${1}}${0}
endsnippet


#
# Flow Control
#
snippet if "if (condition) { ... }"
if (${1:true}) {
  ${0:${VISUAL}}
}
endsnippet

snippet ifelse "if (condition) { ... } else { ... }"
if (${1:true}) {
  ${0:${VISUAL}}
} else {
  ${2}
}
endsnippet

snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

snippet switch
switch (${1:expression}) {
  case '${3:case}':
    ${4}
    break;
  ${0}
  default:
    ${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${1:case}':
  ${0:${VISUAL}}
  break;
endsnippet
snippet try "try { ... } catch(e) { ... }"
try {
  ${0:${VISUAL}}
} catch (${1:e}) {
  ${2:/* handle error */}
}
endsnippet


#
# Error Handling
# 
snippet err "throw new Error()"
throw new Error('${1:error message}')
endsnippet


#
# Documentation
#
snippet /** "doc string"
/**
 * ${0:description}
 *
 */
endsnippet

snippet @par "@param {type} name description"
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret "@ret {type} description"
@return {${1:type}} ${0:description}
endsnippet


#
# JSON
#
snippet jsonp "JSON.parse"
JSON.parse(${0:jstr});
endsnippet

snippet jsons "JSON.stringify"
JSON.stringify(${0:object});
endsnippet


#
# DOM
#
snippet setTime "setTimeout()"
setTimeout(() => {${0}}${2}, ${1:10});
endsnippet
