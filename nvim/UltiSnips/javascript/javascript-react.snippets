#
# Imports
#
snippet ir "import React from 'react';"
import React from 'react';
endsnippet

snippet ird "import ReactDOM from 'react-dom';"
import ReactDOM from 'react-dom';
endsnippet


#
# Lifecycles
#
snippet cdm "componentDidMount"
componentDidMount() {
  ${1}
}
endsnippet

snippet cdup "componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
  ${1}
}
endsnippet

snippet cwm "componentWillMount"
componentWillMount() {
  ${1}
}
endsnippet

snippet cwr "componentWillReceiveProps"
componentWillReceiveProps(nextProps) {
  ${1}
}
endsnippet

snippet cwun "componentWillUnmount"
componentWillUnmount() {
  ${1}
}
endsnippet

snippet cwu "componentDidUpdate"
componentWillUpdate(nextProps, nextState) {
  ${1}
}
endsnippet

snippet scu "shouldComponentUpdate"
shouldComponentUpdate(nextProps, nextState) {
  ${1}
}
endsnippet


#
# Class Properties
#
snippet ctor "constructor()"
constructor() {
  super();
  ${1}
}
endsnippet

snippet dp "defaultProps"
static defaultProps = {
  ${1}: ${2},
}
endsnippet

snippet state "state = {}"
state = {
  ${1}: ${2},
}
endsnippet

snippet pt "propTypes"
static propTypes = {
  ${1}: React.PropTypes.${2:type},
}
endsnippet

#
# Class Creation
#
snippet rcc "class x extends Component"
class ${1:ClassName} extends Component {
  render() {
    return (
        ${0:<div />}
        );
  }
}
endsnippet

snippet rend "render()"
render() {
  return (
      ${1:<div />}
      );
}
endsnippet


#
# SetState
#
snippet sst "setState()"
this.setState((state) => { return { ${1}: ${2} } });
endsnippet
